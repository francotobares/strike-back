const express = require('express');
const router = express.Router();
const vulnerabilityService = require('../services/vulnerabilityService');
const vulnerabilityStateService = require('../services/vulnerabilityStateService');

/**
 * @swagger
 * components:
 *   schemas:
 *     Vulnerability:
 *       type: object
 *       required:
 *         - title
 *         - description
 *         - severity
 *         - affectedComponent
 *         - reporter
 *       properties:
 *         id:
 *           type: integer
 *           description: Auto-generated ID
 *         title:
 *           type: string
 *           description: Vulnerability title
 *         description:
 *           type: string
 *           description: Detailed description of the vulnerability
 *         severity:
 *           type: string
 *           enum: [Low, Medium, High, Critical]
 *         cwe:
 *           type: string
 *         affectedComponent:
 *           type: string
 *         technicalImpact:
 *           type: string
 *         poc:
 *           type: string
 *         status:
 *           type: string
 *           enum: [Open, 'In Progress', Fixed, Closed, "Won't Fix"]
 */

/**
 * @swagger
 * /vulnerabilities:
 *   get:
 *     summary: Returns all vulnerabilities
 *     responses:
 *       200:
 *         description: List of vulnerabilities
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Vulnerability'
 */
router.get('/', async (req, res) => {
  try {
    const includeDeleted = req.query.includeDeleted === 'true';
    const vulnerabilities = await vulnerabilityService.getAllVulnerabilities(includeDeleted);
    res.json(vulnerabilities);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

/**
 * @swagger
 * /vulnerabilities/{id}:
 *   get:
 *     summary: Get vulnerability by ID
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Vulnerability details
 *       404:
 *         description: Vulnerability not found
 */
router.get('/:id', async (req, res) => {
  try {
    const vulnerability = await vulnerabilityService.getVulnerabilityById(req.params.id);
    res.json(vulnerability);
  } catch (error) {
    if (error.message === 'Vulnerability not found') {
      res.status(404).json({ message: error.message });
    } else {
      res.status(500).json({ message: error.message });
    }
  }
});

/**
 * @swagger
 * /vulnerabilities:
 *   post:
 *     summary: Create a new vulnerability
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Vulnerability'
 *     responses:
 *       201:
 *         description: Vulnerability created successfully
 *       400:
 *         description: Invalid input
 */
router.post('/', async (req, res) => {
  try {
    const newVulnerability = await vulnerabilityService.createVulnerability(req.body);
    res.status(201).json(newVulnerability);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

/**
 * @swagger
 * /vulnerabilities/{id}:
 *   put:
 *     summary: Update a vulnerability
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Vulnerability'
 *     responses:
 *       200:
 *         description: Vulnerability updated successfully
 *       404:
 *         description: Vulnerability not found
 */
router.put('/:id', async (req, res) => {
  try {
    const vulnerability = await vulnerabilityService.updateVulnerability(req.params.id, req.body);
    res.json(vulnerability);
  } catch (error) {
    if (error.message === 'Vulnerability not found') {
      res.status(404).json({ message: error.message });
    } else {
      res.status(400).json({ message: error.message });
    }
  }
});

/**
 * @swagger
 * /vulnerabilities/{id}/state:
 *   put:
 *     summary: Change vulnerability state
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - state
 *             properties:
 *               state:
 *                 type: string
 *                 enum: [Open, 'In Progress', Fixed, "Won't Fix", Closed]
 *     responses:
 *       200:
 *         description: Vulnerability state changed successfully
 *       400:
 *         description: Invalid state transition
 *       404:
 *         description: Vulnerability not found
 */
router.put('/:id/state', async (req, res) => {
  try {
    const { state } = req.body;
    const vulnerability = await vulnerabilityStateService.changeState(
      req.params.id,
      state
    );
    res.json(vulnerability);
  } catch (error) {
    if (error.message.includes('Invalid state transition')) {
      res.status(400).json({ message: error.message });
    } else if (error.message.includes('not found')) {
      res.status(404).json({ message: error.message });
    } else {
      res.status(500).json({ message: error.message });
    }
  }
});

/**
 * @swagger
 * /vulnerabilities/{id}:
 *   delete:
 *     summary: Delete a vulnerability
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Vulnerability deleted successfully
 *       404:
 *         description: Vulnerability not found
 */
router.delete('/:id', async (req, res) => {
  try {
    const result = await vulnerabilityService.deleteVulnerability(req.params.id);
    res.json(result);
  } catch (error) {
    if (error.message === 'Vulnerability not found') {
      res.status(404).json({ message: error.message });
    } else {
      res.status(500).json({ message: error.message });
    }
  }
});

/**
 * @swagger
 * /vulnerabilities/deleted:
 *   get:
 *     summary: Get deleted vulnerabilities
 *     responses:
 *       200:
 *         description: List of deleted vulnerabilities
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Vulnerability'
 */
router.get('/deleted', async (req, res) => {
  try {
    const deletedVulnerabilities = await vulnerabilityService.getDeletedVulnerabilities();
    res.json(deletedVulnerabilities);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

/**
 * @swagger
 * /vulnerabilities/{id}/restore:
 *   post:
 *     summary: Restore a deleted vulnerability
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Vulnerability restored successfully
 *       404:
 *         description: Vulnerability not found
 *       400:
 *         description: Vulnerability is not deleted
 */
router.post('/:id/restore', async (req, res) => {
  try {
    const result = await vulnerabilityService.restoreVulnerability(req.params.id);
    res.json(result);
  } catch (error) {
    if (error.message === 'Vulnerability not found') {
      res.status(404).json({ message: error.message });
    } else if (error.message === 'Vulnerability is not deleted') {
      res.status(400).json({ message: error.message });
    } else {
      res.status(500).json({ message: error.message });
    }
  }
});

module.exports = router; 